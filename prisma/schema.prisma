datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  isSeller       Boolean         @default(false)
  isLabour       Boolean         @default(false)
  role           Role?           @default(USER)
  blogs          Blog[]
  communityPosts CommunityPost[]
  answers        Answer[]
  products       Product[]
  labour         Labour?
  managements    Management[]
  accounts       Account[]
  sessions       Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  votes     Vote[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  USER
}

model Blog {
  id          String   @id @default(cuid())
  blogTitle   String
  blogContent String
  blogImage   String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Disease {
  id                 String   @id @default(cuid())
  diseaseName        String
  diseaseDescription String
  cure               String
  prevention         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("diseases")
}

model CommunityPost {
  id              String   @id @default(cuid())
  postTitle       String
  postDescription String
  postImage       String
  votes           Vote[]
  answers         Answer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?

  @@map("community_posts")
}

model Answer {
  id              String        @id @default(cuid())
  answerContent   String
  votes           Vote[]
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityPostId String
  communityPost   CommunityPost @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("answers")
}

model Vote {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  answerId        String? // Nullable for CommunityPost
  type            VoteType
  createdAt       DateTime       @default(now())
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id])
  communityPostId String?
  Answer          Answer?        @relation(fields: [answerId], references: [id])

  @@unique([userId, communityPostId])
  @@unique([userId, answerId])
  @@map("votes")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ProductType {
  CROP
  FERTILIZER
  UTILS
  SEED
}

model Product {
  id                 String      @id @default(cuid())
  productName        String
  productType        ProductType
  productDescription String
  productImage       String
  productPrice       Int
  productRating      Float       @default(0.00)
  totalSold          Int         @default(0)
  productRemaining   Int
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  cartItem           CartItem[]

  @@map("products")
}

model JobPost {
  id             String   @id @default(cuid())
  jobTitle       String
  jobDescription String
  labourCount    Int
  applyCount     Int
  location       String
  wage           Int
  workHours      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  labours        Labour[]

  @@map("job_posts")
}

enum LabourType {
  FIELD_LABOUR
  LIVESTOCK_WORKER
  EQUIPMENT_OPERATOR
  IRRIGATION_TECHNICIAN
  HARVEST_WORKER
  SUPERVISOR
  FARM_GUARD
}

model Labour {
  id         String     @id @default(cuid())
  location   String
  wageDemand Int
  labourType LabourType
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @unique
  jobs       JobPost[]

  @@map("labors")
}

model Management {
  id                 String   @id @default(cuid())
  cropTitle          String
  plantingDate       DateTime
  expectedHarvDate   DateTime
  irrigationInterval Int
  lastIrrigation     DateTime
  lastPesticide      DateTime
  waterAmount        Int
  pesticidesUsed     String
  disease            String
  actionTaken        Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@map("managements")
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}
